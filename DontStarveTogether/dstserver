#!/bin/bash
# Dont Starve Together
# Server Management Script
# Author: Daniel Gibbs
# Contributor: Marvin Lehmann (marvinl97)
# Website: https://gameservermanagers.com
if [ -f ".dev-debug" ]; then
	exec 5>dev-debug.log
	BASH_XTRACEFD="5"
	set -x
fi

version="020916" # WIP

#### Variables ####

# Installation Variables (move to installer? could be problematic with paths?)
# multishard: Should this cluster have multiple shards/servers?
# shard: Name of the shard (It should be "Master" for the main/master server.)
# slave: Is it a server that connects to a master server?
# cave: Should the map be a cave?
# Visit the following link for more information:
# https://github.com/GameServerManagers/LinuxGSM/wiki/Don't-Starve-Together
multishard="false"
slave="false"
shard="Master" 
cluster="Cluster_1"
cave="false"

# Notification Alerts
# (on|off)

# Email
emailalert="off"
email="email@example.com"

# Pushbullet
# https://www.pushbullet.com/#settings
pushbulletalert="off"
pushbullettoken="accesstoken"

# Steam login
steamuser="anonymous"
steampass=""

# Start Variables
# ports have to be increased for each shard
ip="0.0.0.0"
port="11000"
steamauthenticationport="8768"
steammasterserverport="27018"
tickrate="15"
updateonstart="off"

# You shouldn't probably touch that
persistentstorageroot="${HOME}/.klei"
confdir="DoNotStarveTogether"

fn_parms(){
parms="-persistent_storage_root ${persistentstorageroot} -conf_dir ${confdir} -cluster ${cluster} -shard ${shard} -bind_ip ${ip} -port ${port} -steam_master_server_port ${steammasterserverport} -steam_authentication_port ${steamauthenticationport} -tick ${tickrate}"
}

#### Advanced Variables ####

# Github Branch Select
# Allows for the use of different function files
# from a different repo and/or branch.
githubuser="GameServerManagers"
githubrepo="LinuxGSM"
githubbranch="dstserver"

# Steam
appid="343050"

# Server Details
servicename="dst-server"
gamename="Don't Starve Together"
engine="dontstarve"

# Directories
rootdir="$(dirname $(readlink -f "${BASH_SOURCE[0]}"))"
selfname="$(basename $(readlink -f "${BASH_SOURCE[0]}"))"
lockselfname=".${servicename}.lock"
lgsmdir="${rootdir}/lgsm"
functionsdir="${lgsmdir}/functions"
libdir="${lgsmdir}/lib"
filesdir="${rootdir}/serverfiles"
systemdir="${filesdir}"
executabledir="${filesdir}/bin"
executable="./dontstarve_dedicated_server_nullrenderer"
clustercfg="cluster.ini"
servercfg="server.ini"
clustercfgdir="${persistentstorageroot}/${confdir}/${cluster}"
servercfgdir="${clustercfgdir}/${shard}"
clustercfgfullpath="${clustercfgdir}/${clustercfg}"
servercfgfullpath="${servercfgdir}/${servercfg}"
clustercfgdefault="${clustercfgdir}/lgsm-default.cluster.ini"
servercfgdefault="${clustercfgdir}/lgsm-default.server.ini"
backupdir="${rootdir}/backups"

# Logging
logdays="7"
gamelogdir="${clustercfgdir}/${shard}"
scriptlogdir="${rootdir}/log/script"
consolelogdir="${rootdir}/log/console"
consolelogging="on"

scriptlog="${scriptlogdir}/${servicename}-script.log"
consolelog="${consolelogdir}/${servicename}-console.log"
emaillog="${scriptlogdir}/${servicename}-email.log"

scriptlogdate="${scriptlogdir}/${servicename}-script-$(date '+%d-%m-%Y-%H-%M-%S').log"
consolelogdate="${consolelogdir}/${servicename}-console-$(date '+%d-%m-%Y-%H-%M-%S').log"

##### Script #####
# Do not edit

# Fetches core_dl for file downloads
fn_fetch_core_dl(){
github_file_url_dir="lgsm/functions"
github_file_url_name="${functionfile}"
filedir="${functionsdir}"
filename="${github_file_url_name}"
githuburl="https://raw.githubusercontent.com/${githubuser}/${githubrepo}/${githubbranch}/${github_file_url_dir}/${github_file_url_name}"
# If the file is missing, then download
if [ ! -f "${filedir}/${filename}" ]; then
	if [ ! -d "${filedir}" ]; then
		mkdir -p "${filedir}"
	fi
	echo -e "    fetching ${filename}...\c"
	# Check curl exists and use available path
	curlpaths="$(command -v curl 2>/dev/null) $(which curl >/dev/null 2>&1) /usr/bin/curl /bin/curl /usr/sbin/curl /sbin/curl)"
	for curlcmd in ${curlpaths}
	do
		if [ -x "${curlcmd}" ]; then
			break
		fi
	done
	# If curl exists download file
	if [ "$(basename ${curlcmd})" == "curl" ]; then
		curlfetch=$(${curlcmd} -s --fail -o "${filedir}/${filename}" "${githuburl}" 2>&1)
		if [ $? -ne 0 ]; then
			echo -e "\e[0;31mFAIL\e[0m\n"
			echo "${curlfetch}"
			echo -e "${githuburl}\n"
			exit 1
		else
			echo -e "\e[0;32mOK\e[0m"
		fi
	else
		echo -e "\e[0;31mFAIL\e[0m\n"
		echo "Curl is not installed!"
		echo -e ""
		exit 1
	fi
	chmod +x "${filedir}/${filename}"
fi
source "${filedir}/${filename}"
}

core_dl.sh(){
# Functions are defined in core_functions.sh.
functionfile="${FUNCNAME}"
fn_fetch_core_dl
}

core_functions.sh(){
# Functions are defined in core_functions.sh.
functionfile="${FUNCNAME}"
fn_fetch_core_dl
}

core_dl.sh
core_functions.sh

getopt=$1
core_getopt.sh
